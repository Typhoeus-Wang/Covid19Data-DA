q()
q()
## ------------------------------ challenge ------------------------------
## create a function that converts height from meters to feet and inches
## Hint: use operators %% (modulo) and %/% (integer division)
a1 <- 100
a2 <- 200
a <- (a1+a2)/2
## ------------------------------ challenge ------------------------------
## create a function that converts height from meters to feet and inches
## Hint: use operators %% (modulo) and %/% (integer division)
a1 <- 90
## ------------------------------ challenge ------------------------------
## create a function that converts height from meters to feet and inches
## Hint: use operators %% (modulo) and %/% (integer division)
a<-c(4,4,8)
b<-c(2,1)
c<-a+b
prices <-c(9,44,2,3,5)
prices[prices<5]<-5
prices
sn<-c("Nate","Ani","Jeremy","Daria")
sg<-c(82,74,91,92)
sn[sg>82]
power<-function(x,y){
number<-x
exponent<-y
result<-number^exponent
cat("x=",x,"result=",result,"\n")
}
power(3,4)
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant["languages"]
applicant[languages]
applicant[["languages"]]
applicant$languages
applicant["languages"]
cat("a =", a, ", b =", b, ", i =", i, "\n")
a <- 101
b <- 105
i <- 0
if(a > 102) {
b <- b + 1
i <- i + 1
} else {
a <- a - 1
i <- i + 1
}
cat("a =", a, ", b =", b, ", i =", i, "\n")
l <- list("a", "b", "c")
l[1:2]
l$b
v<-1:4
if(v > 2) cat("large ") else cat("small ")
name <- c("Ji Gong", "Cloud Dragon", "Liu Chang")
age <-c("22","33","44")
position <- c("manager", "engineer", "manager")
df <- data.frame(name,age,position,stringsAsFactors = FALSE)
View(df)
col(df, "position")
df["position"]
df$position
df[, "position"]
df[["position"]]
df.position
df[salary <- c(50, 80, 100)*1000]
df$salary <- c(50, 80, 100)*1000
View(df)
View(df)
View(df)
View(df)
rm(df$salary)
rm(df)
df <- data.frame(name,age,position,stringsAsFactors = FALSE)
df <- salary = c(50, 80, 100)*1000
df["salary"] <- c(50, 80, 100)*1000
rm(df)
df <- data.frame(name,age,position,stringsAsFactors = FALSE)
df[["salary"]] <- c(50, 80, 100)*1000
rm(df)
df <- data.frame(name,age,position,salary,stringsAsFactors = FALSE)
View(df)
df["salary"] <- 1.1*df["salary", "manager"]
rm(df)
# important
df <- data.frame(name,age,position,salary,stringsAsFactors = FALSE)
df$salary[df$manager == TRUE] <- 1.1*manager$salary
df$salary[df$manager == TRUE] <- 1.1*manager$salary
df$salary[df$position == "manager"] = 1.1*df$salary[df$position == "manager"]
source('C:/Users/ruiboc/Desktop/uw-courses/SP2021-INFO201/R-file/a2-basic-programming-ruiboc/assignment.R')
source('C:/Users/ruiboc/Desktop/uw-courses/SP2021-INFO201/R-file/a2-basic-programming-ruiboc/assignment.R')
x <- c("1","2","3")
y <- c("4","1","7")
df <- data.frame(x,y)
View(df)
fips <- c("52001","52002","52003")
df <- data.frame(x,yï¼Œfips)
df <- data.frame(x,y,fips)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10)
library(ggplot2)
x <- c("1","2","3")
y <- c("4","1","7")
fips <- c("52001","52002","52003")
df <- data.frame(x,y,fips)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10)
ggplot(df, aes(x, y, col = factor(fips))) +
geom_point(size=10)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10) +
scale_color_manual(breaks=c(51001, 51002, 51003), values=c("red", "blue", "green"))
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10) +
labs(col = c("51001" = "red", "51002"="blue", "51013" = "green"))
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10)
fips <- as.factor(fips)
df <- data.frame(x,y,fips)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10)
ggplot(df, aes(x, y, col=factor(fips))) +
geom_point(size=10)
fips <- c("52001","52002","52003")
df <- data.frame(x,y,fips)
ggplot(df, aes(x, y, col=factor(fips))) +
geom_point(size=10)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10)
ggplot(df, aes(x, y, col=fips)) +
geom_point(size=10) +
scale_color_manual(breaks=c(51001, 51002, 51003), values=c("red", "blue", "green"))
t.test(0.05,6)
t.test(0.05,23)
setwd("C:/Users/ruiboc/Desktop/uw-courses/SP2021-INFO201/R-file/project_proposal")
library(dplyr)
library(dplyr)
data <- read.delim("country_wise_latest.csv")
View(data)
data <- read.csv("country_wise_latest.csv")
data <- read.csv("country_wise_latest.csv")
View(data)
data <- read.csv("covid_19_clean_complete.csv.zip")
data <- read.delim("covid_19_clean_complete.csv.zip")
data <- read.delim("covid_19_clean_complete.csv.zip", na.rm = TRUE)
data <- read.delim("covid_19_clean_complete.csv.zip")
data <- read.csv("covid_19_clean_complete.csv.zip")
setwd("C:/Users/ruiboc/Desktop/uw-courses/SP2021-INFO201/R-file/project_proposal")
data <- read.delim2("covid_19_clean_complete.csv.zip")
setwd("C:/Users/ruiboc/Desktop/uw-courses/SP2021-INFO201/R-file/project_proposal")
data <- read.delim2("covid_19_clean_complete.csv")
data <- read.delim("covid_19_clean_complete.csv")
View(data)
data <- read.csv("covid_19_clean_complete.csv")
data <- read.csv("covid_19_clean_complete.csv")
View(data)
changed_data <- data %>%
group_by(Country.Region)
View(changed_data)
changed_data <- data %>%
group_by(Country.Region) %>%
summarise()
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed == sum(Confirmed))
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed))
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
summarise()
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
summarise(Country.Region,Long)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
summarise(Country.Region)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
summarise()
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
select(Country.Region,Lat,Long,death_rate)
changed_data <- data %>%
group_by(Province.State) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
select(Province.State,Country.Region,Lat,Long,death_rate)
changed_data <- data %>%
group_by(Province.State) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
select(Province.State,Country.Region,Lat,Long,death_rate) %>%
summarise()
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
select(Province.State,Country.Region,Lat,Long,death_rate)
library(maps)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
select(Province.State,Country.Region,Lat,Long,death_rate) %>%
unite(Province.State, Country.Region, sep = ",")
map <- map_data("county")
library(maps)
library(ggplot2)
map <- map_data("county")
View(map)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed)
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China")
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China", Date == "2020-01-22")
changed_data <- data %>%
group_by(Country.Region) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China", Date == "2020-01-22") %>%
select(Province.State, Country.Region, death_rate)
changed_data <- data %>%
group_by(Province.State) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China", Date == "2020-01-22") %>%
select(Province.State, Country.Region, death_rate)
changed_data <- data %>%
group_by(Province.State) %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
select(Province.State, Country.Region, Date, death_rate)
point <- ggplot(changed_data) %>%
geom_line(aes(Date, death_rate))
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate))
point
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
select(Province.State, Country.Region, Date, death_rate)
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate))
point
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01", Date == "2020-03-01", Date == "2020-04-01") %>%
select(Province.State, Country.Region, Date, death_rate)
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate))
point
point <- ggplot(changed_data) +
geom_poit(aes(Date, death_rate))
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate))
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate))
point
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01", Date == "2020-03-01", Date == "2020-04-01") %>%
select(Province.State, Country.Region, Date, death_rate)
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China")
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01")
changed_data <- data %>%
mutate(total_confirmed = sum(Confirmed)) %>%
mutate(total_death = sum(Deaths)) %>%
mutate(death_rate = total_death/total_confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01") %>%
select(Province.State, Country.Region, Date, death_rate)
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01") %>%
select(Province.State, Country.Region, Date, death_rate)
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-02-01", Date == "2020-03-01") %>%
select(Province.State, Country.Region, Date, death_rate)
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date == "2020-03-01") %>%
select(Province.State, Country.Region, Date, death_rate)
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date %in% c("2020-02-01","2020-03-01","2020-04-01","2020-05-01","2020-06-01","2020-07-01")) %>%
select(Province.State, Country.Region, Date, death_rate)
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate))
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate), col = "Country.Region")
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate), col = Country.Region)
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate, col = Country.Region))
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate, col = Province.State))
point
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate, col = Province.State))
point
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date %in% c("2020-02-01","2020-03-01","2020-04-01","2020-05-01","2020-06-01","2020-07-01")) %>%
select(Province.State, Country.Region, Date, death_rate) %>%
group_by(Province.State)
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate, col = Province.State))
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate, col = Province.State))
point
point <- ggplot(changed_data) +
geom_point(aes(Date, death_rate, group = Province.State, col = Province.State))
point
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate, group = Province.State, col = Province.State))
point
point
changed_data <- data %>%
mutate(death_rate = Deaths / Confirmed) %>%
filter(Country.Region == "China") %>%
filter(Date %in% c("2020-02-01","2020-03-01","2020-04-01","2020-05-01","2020-06-01","2020-07-01")) %>%
filter(Province.State %in% c("Hubei","Beijing","Sichuan")) %>%
select(Province.State, Country.Region, Date, death_rate)
point <- ggplot(changed_data) +
geom_line(aes(Date, death_rate, group = Province.State, col = Province.State))
point
point
